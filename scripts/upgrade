#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=2

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
language=$(ynh_app_setting_get --app=$app --key=language)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
current_version=$(ynh_app_setting_get --app=$app --key=version)
update_version=$(ynh_app_upstream_version "../manifest.json")
datadir=$final_path/documents/

fpm_footprint=$(ynh_app_setting_get --app=$app --key=fpm_footprint)
fpm_usage=$(ynh_app_setting_get --app=$app --key=fpm_usage)
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=11

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# If fpm_footprint doesn't exist, create it
if [ -z "$fpm_footprint" ]; then
	fpm_footprint=medium
	ynh_app_setting_set --app=$app --key=fpm_footprint --value=$fpm_footprint
fi

# If fpm_usage doesn't exist, create it
if [ -z "$fpm_usage" ]; then
	fpm_usage=medium
	ynh_app_setting_set --app=$app --key=fpm_usage --value=$fpm_usage
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

# Create a permission if needed
if ! ynh_permission_exists --permission "public_space"; then
	ynh_permission_create --permission "public_space" --url "/public/" --allowed "visitors"
fi

# Delete existing ini configuration file (backward compatibility)
if [ -f /etc/php/$YNH_PHP_VERSION/fpm/conf.d/20-$app.ini ]; then
    ynh_secure_remove --file=/etc/php/$YNH_PHP_VERSION/fpm/conf.d/20-$app.ini
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=1

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

ynh_backup_if_checksum_is_different --file="/etc/nginx/conf.d/$domain.d/$app.conf"

# Delete current NGINX configuration to be able to check if .well-known is already served.
ynh_remove_nginx_config
ynh_app_setting_delete --app=$app --key="checksum__etc_nginx_conf.d_$domain.d_$app.conf"

# Wait untils NGINX has fully reloaded
ynh_systemd_action --service_name=nginx --action=reload --line_match="Reloaded" --log_path="systemd"

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading PHP-FPM configuration..." --weight=2

# If php has changed, remove the old fpm config file
# if [ "$phpversion" != $YNH_PHP_VERSION ]
# then
    # ynh_backup_if_checksum_is_different --file="/etc/php/$phpversion/fpm/pool.d/$app.conf"
    # ynh_secure_remove --file="/etc/php/$phpversion/fpm/pool.d/$app.conf"
    # if [ -f /etc/php/$phpversion/fpm/conf.d/20-$app.ini ]; then
        # ynh_secure_remove --file="/etc/php/$phpversion/fpm/conf.d/20-$app.ini"
    # fi
    # ynh_systemd_action --service_name="php${phpversion}-fpm" --action=reload
    
    # phpversion="$YNH_PHP_VERSION"
# fi

# Recreate a dedicated PHP-FPM config
ynh_add_fpm_config --usage=$fpm_usage --footprint=$fpm_footprint
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)

#=================================================
# SPECIFIC UPGRADE
#=================================================
# MAKE SEQUENTIAL UPGRADES FROM EACH MAJOR
# VERSION TO THE NEXT ONE
#=================================================
if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=60

	# Load the last available version
    source upgrade.d/upgrade.last.sh
    last_version=$next_version

	last_major_version=${last_version%%.*}

	# While the current version is not the last version, do an upgrade
    while [ "$last_version" != "$current_version" ]
    do
	
		# The major version is the first part of the version number
        current_major_version=${current_version%%.*}

        if [ ! -f upgrade.d/upgrade.$current_major_version.sh ]; then
            source upgrade.d/upgrade.last.sh
        else
            source upgrade.d/upgrade.$current_major_version.sh
        fi
		
		# If the current version has the same major version than the next one,
        # then it's the last upgrade to do
        # We also cover the case where the last version is the first of the current major version series
        # (e.g. 20.0.0 is the latest version)
        if [[ ("$last_major_version" -eq "$current_major_version") || ( ("$last_major_version" -eq "$((current_major_version+1))") && ("$next_version" == "$last_version") ) ]]; then
            current_major_version=last
        fi
	
		# Load the value for this version
        source upgrade.d/upgrade.$current_major_version.sh

		ynh_print_info --message="Upgrading app from $current_version to $next_version"
		
		# Create an app.src for this version of Dolibarr
        cat > ../conf/app.src << EOF
SOURCE_URL=https://github.com/Dolibarr/dolibarr/archive/$next_version.tar.gz
SOURCE_SUM=$dolibarr_source_sha256
SOURCE_SUM_PRG=sha256sum
SOURCE_FORMAT=tar.bz2
SOURCE_IN_SUBDIR=true
EOF


		chown -R $app: "$final_path"

		# Remove the lock if it exists
		lock=$final_path/documents/install.lock
		if [ -f $lock ]
		then
			ynh_secure_remove $lock
		fi
		
		mkdir -p /var/log/$app/
		
		# Upgrade with CURL
		
		# Set the app as temporarily public for cURL call
		if ! ynh_permission_has_user --permission "main" --user="visitors"; then
			ynh_permission_update --permission="main" --add="visitors"
		fi
			
		
		charset=$(mysql -ss -N -e "SELECT default_character_set_name FROM information_schema.SCHEMATA WHERE schema_name = '$db_name'")
		if [ "$charset" != "utf8" ]
		then
			ynh_print_info --message="Changing Database charset to utf8"
			
			ynh_mysql_execute_as_root --database=$db_name --sql="ALTER DATABASE $db_name charset=utf8"
					
			ynh_local_curl  "/install/repair.php" \
					"force_utf8_on_tables=confirmed" > /var/log/$app/repair.html
		fi

		ynh_exec_fully_quiet sleep 5
		
		# Download, check integrity, uncompress and patch the source from app.src
		ynh_setup_source --dest_dir="$final_path" --full_replace=1
		
		pushd $final_path/htdocs/install/
		
		if php$phpversion upgrade.php $current_version $next_version > /var/log/$app/upgrade.html;  then
			ynh_print_info --message="Step 1 upgrading ended successfully"
		else
			ynh_die --message="Step 1 upgrading ended with error"
		fi

		ynh_exec_fully_quiet sleep 5

		if php$phpversion upgrade2.php $current_version $next_version > /var/log/$app/upgrade2.html; then
			ynh_print_info --message="Step 2 upgrading ended successfully"
		else
			ynh_die --message="Step 2 upgrading ended with error"
		fi

		ynh_exec_fully_quiet sleep 5

		if php$phpversion step5.php $current_version $next_version > /var/log/$app/upgrade3.html; then
			ynh_print_info --message="Step 3 upgrading ended successfully"
		else
			ynh_die  --message="Step 3 upgrading ended with error"
		fi
		

		popd
		
		ynh_permission_update --permission="main" --remove="visitors"
		
		# Get the new current version number
        current_version=$next_version
        current_major_version=${current_version%%.*}
		
		done
		
		if php$phpversion $final_path/scripts/user/sync_users_ldap2dolibarr.php commitiferror --server=localhost -y; then
				ynh_print_info --message="LDAP user update ok"
		else
				ynh_print_info --message="LDAP user update ended with error"
		fi
		
		ynh_app_setting_set --app=$app --key=version --value=$update_version
fi

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

ynh_backup_if_checksum_is_different --file="$final_path/htdocs/conf/conf.php"
# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum --file="$final_path/htdocs/conf/conf.php"
chmod 644 "$final_path/htdocs/conf/conf.php"

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Configuring permissions..." --weight=1

# Set permissions on app files
if [ ! -f "$datadir/install.lock" ]; then
	echo 'This is a lock file to prevent use of install pages (set with permission 440)' > "$datadir/install.lock"
	chown $app:$app "$datadir/install.lock"
	chmod 440 "$datadir/install.lock"
fi

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

mkdir -p "$datadir"
chown -R $app: "$datadir"
chmod go-w $datadir

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
