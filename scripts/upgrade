#!/bin/bash

source _common.sh
source /usr/share/yunohost/helpers

ynh_app_setting_set_default --key=php_memory_limit --value=256M

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression "Ensuring downward compatibility..."

# Delete existing ini configuration file (backward compatibility)
if [ -f /etc/php/$YNH_PHP_VERSION/fpm/conf.d/20-$app.ini ]; then
    ynh_safe_rm /etc/php/$YNH_PHP_VERSION/fpm/conf.d/20-$app.ini
fi

if [ -n "${version:-}" ]; then
    ynh_app_setting_delete --key="version"
fi

charset=$(mysql -ss -N -e "SELECT default_character_set_name FROM information_schema.SCHEMATA WHERE schema_name = '$db_name'")
if [ "$charset" != "utf8" ]; then
    ynh_print_info "Changing Database charset to utf8"
    ynh_mysql_db_shell <<< "ALTER DATABASE $db_name charset=utf8"
    ynh_local_curl  "/install/repair.php" "force_utf8_on_tables=confirmed"
    sleep 5
fi

#=================================================
# MAKE SEQUENTIAL UPGRADES FROM EACH MAJOR
# VERSION TO THE NEXT ONE
#=================================================
ynh_script_progression "Upgrading source files..."

# Sort --version-sort cdÃ©cembrean handle underscore in versions numbers
mapfile -t main_versions < <(
    ynh_read_manifest | keys[]" | grep "main_" | sort --version-sort
)
current_version="$YNH_APP_CURRENT_VERSION"
for version in "${main_versions[@]}"; do
    new_version=$(echo "$version" | sed 's|main_||' | sed 's|_|.|g')
    if dpkg --compare-versions "$current_version" ge "$new_version"; then
        continue
    fi
    ynh_print_info "Upgrading app from $current_version to $new_version"
    source_id="$version"
    upgrade_dolibarr
    current_version="$new_version"
done

# Final upgrade to the final version
new_version=$(ynh_app_upstream_version)
source_id="main"
ynh_print_info "Upgrading app from $current_version to $new_version"
upgrade_dolibarr

if "php$php_version" "$install_dir/scripts/user/sync_users_ldap2dolibarr.php" commitiferror --server=localhost -y; then
    ynh_print_info "LDAP user update ok"
else
    ynh_print_info "LDAP user update ended with error"
fi

ynh_backup_if_checksum_is_different "$install_dir/htdocs/conf/conf.php"
# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum "$install_dir/htdocs/conf/conf.php"
chmod 644 "$install_dir/htdocs/conf/conf.php"

if [ ! -f "$install_dir/documents/install.lock" ]; then
    echo 'This is a lock file to prevent use of install pages (set with permission 440)' > "$install_dir/documents/install.lock"
    chown "$app:$app" "$install_dir/documents/install.lock"
    chmod 440 "$install_dir/documents/install.lock"
fi

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R "$app:www-data" "$install_dir"

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression "Upgrading system configurations related to $app..."

ynh_config_add_phpfpm

ynh_config_add_nginx

ynh_config_add_logrotate

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Upgrade of $app completed"
